<?xml version="1.0" encoding="utf-8"?>
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <PackagesTargetsFile>$(MSBuildProjectDirectory)\$(IntermediateOutputPath)Packages.targets</PackagesTargetsFile>
    <BuildDependsOn>CheckPackageReferences;$(BuildDependsOn)</BuildDependsOn>
  </PropertyGroup>
  <ItemDefinitionGroup>
    <PackageReference>
      <Visible>False</Visible>
      <TargetFramework>portable-net451+win81+wpa81</TargetFramework>
      <Assemblies />
    </PackageReference>
  </ItemDefinitionGroup>
  <UsingTask
    TaskName="WritePackageReferences"
    TaskFactory="CodeTaskFactory"
    AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <TargetsFile ParameterType="System.String" Required="true" />
      <PackageReferences ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
        var packagesFolder = Environment.GetEnvironmentVariable("DOTNET_PACKAGES")
            ?? Path.Combine(
                Environment.GetEnvironmentVariable("USERPROFILE") ?? Environment.GetEnvironmentVariable("HOME"),
                ".dotnet",
                "packages");
        
        if (!Directory.Exists(packagesFolder))
        {
            Log.LogError("No packages found.");

            return false;
        }

        Directory.CreateDirectory(Path.GetDirectoryName(TargetsFile));
        using (var writer = new StreamWriter(TargetsFile, append: false))
        {
            writer.WriteLine("<Project xmlns='http://schemas.microsoft.com/developer/msbuild/2003'>");
            writer.WriteLine("  <ItemGroup>");

            var installedPackages = Directory.EnumerateDirectories(packagesFolder).Select(d => Path.GetFileName(d))
                .ToArray();
            foreach (var package in PackageReferences)
            {
                var id = package.ItemSpec;
                var targetFramework = package.GetMetadata("TargetFramework");
                var assemblies = package.GetMetadata("Assemblies");
                if (string.IsNullOrEmpty(assemblies))
                  assemblies = id;

                if (!installedPackages.Contains(id))
                {
                    Log.LogError("Package '{0}' not found.", id);

                    continue;
                }
                
                var latestVersion = Directory.EnumerateDirectories(Path.Combine(packagesFolder, id))
                    .OrderByDescending(p => p).FirstOrDefault();
                if (latestVersion == null)
                {
                    Log.LogError("Package '{0}' version not found.", id);
                }

                foreach (var assembly in assemblies.Split(';'))
                {
                    var hintPath = Path.Combine(
                        packagesFolder,
                        latestVersion,
                        "lib",
                        targetFramework,
                        assembly + ".dll");

                    writer.WriteLine("    <Reference Include='{0}'>", assembly);
                    writer.WriteLine("      <HintPath>{0}</HintPath>", hintPath);
                    writer.WriteLine("    </Reference>");
                }
            }

            writer.WriteLine("  </ItemGroup>");
            writer.WriteLine("</Project>");
        }
        ]]>
      </Code>
    </Task>
  </UsingTask>
  <Target Name="CheckPackageReferences">
    <Error
      Text="Package references not found. Run 'build initialize' before opening the solution for the first time."
      Condition="!Exists('$(PackagesTargetsFile)')" />
  </Target>
  <Target Name="WritePackageReferences">
    <WritePackageReferences
      TargetsFile="$(PackagesTargetsFile)"
      PackageReferences="@(PackageReference)" />
  </Target>
  <Import Project="$(PackagesTargetsFile)" Condition="Exists('$(PackagesTargetsFile)')" />
</Project>
